import streamlit as st

# QUAN TR·ªåNG: set_page_config() ph·∫£i l√† l·ªánh Streamlit ƒë·∫ßu ti√™n
st.set_page_config(page_title="Xem danh s√°ch kh·∫£o s√°t", layout="wide", page_icon="üìã")

# Ti·∫øp theo m·ªõi l√† import c√°c th∆∞ vi·ªán
import io
import base64
import datetime
import traceback
import os
from PIL import Image
import requests
from supabase import create_client

# --- Ki·ªÉm tra ƒëƒÉng nh·∫≠p ---
if 'user' not in st.session_state or not st.session_state.user:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng")
    if st.button("ƒêi ƒë·∫øn trang ƒëƒÉng nh·∫≠p"):
        try:
            st.switch_page("../Home.py")
        except Exception:
            try:
                st.switch_page("Getnotes_Onsite.py")
            except Exception:
                st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p. Vui l√≤ng quay l·∫°i trang ch·ªß.")
    st.stop()

# [Ph·∫ßn c√≤n l·∫°i c·ªßa code gi·ªØ nguy√™n]

# --- CSS cho giao di·ªán ---
st.markdown("""
<style>
.download-button {
    display: inline-block;
    padding: 0.5em 1em;
    text-decoration: none;
    color: white;
    background-color: #0066cc;
    border-radius: 5px;
    font-weight: bold;
    margin: 0.5em 0;
    text-align: center;
}
.download-button:hover {
    background-color: #0052a3;
}
.stButton button {
    min-height: 2.5em;
}
.user-info {
    text-align: right;
    font-size: 0.9em;
    margin-bottom: 10px;
}
</style>
""", unsafe_allow_html=True)

# --- Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ---
user_role = "Qu·∫£n tr·ªã vi√™n" if st.session_state.user["role"] == "admin" else "Th√†nh vi√™n"
st.markdown(f"""
<div class="user-info">
    Xin ch√†o, <b>{st.session_state.user['full_name']}</b> | Vai tr√≤: <b>{user_role}</b> | 
    <a href="javascript:void(0);" id="logout-link">ƒêƒÉng xu·∫•t</a>
</div>
<script>
    document.getElementById('logout-link').addEventListener('click', function() {{
        window.parent.postMessage({{type: 'streamlit:setComponentValue', value: true, dataType: 'logout'}}, '*');
    }});
</script>
""", unsafe_allow_html=True)

# X·ª≠ l√Ω ƒëƒÉng xu·∫•t
if st.session_state.get('logout', False):
    st.session_state.user = None
    st.session_state.logout = False
    try:
        st.switch_page("../login.py")
    except Exception:
        try:
            st.switch_page("login.py")
        except Exception:
            st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p. Vui l√≤ng quay l·∫°i trang ch·ªß.")
    st.stop()

# --- Kh·ªüi t·∫°o Session State ---
if 'editing_survey_id' not in st.session_state:
    st.session_state.editing_survey_id = None

# --- C√°c h√†m ti·ªán √≠ch ---
def init_supabase():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi Supabase"""
    try:
        if "supabase" not in st.secrets:
            st.error("üîë Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Supabase!")
            return None
            
        url = st.secrets["supabase"]["url"]
        key = st.secrets["supabase"]["key"]
        
        if not url or not key:
            st.error("üîë URL ho·∫∑c key Supabase kh√¥ng h·ª£p l·ªá!")
            return None
            
        # K·∫øt n·ªëi
        client = create_client(url, key)
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        try:
            # Th·ª≠ truy v·∫•n ƒë∆°n gi·∫£n ƒë·ªÉ x√°c minh k·∫øt n·ªëi
            response = client.table('surveys').select('id').limit(1).execute()
            return client
        except Exception as e:
            st.error(f"‚ùå K·∫øt n·ªëi ƒë·∫øn Supabase th·∫•t b·∫°i: {e}")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Supabase: {e}")
        return None

def load_image_from_url(url):
    """T·∫£i v√† x·ª≠ l√Ω ·∫£nh t·ª´ URL ƒë·ªÉ s·ª≠ d·ª•ng trong export"""
    try:
        response = requests.get(url)
        if response.status_code == 200:
            img = Image.open(io.BytesIO(response.content))
            
            # Chuy·ªÉn ƒë·ªïi RGBA sang RGB n·∫øu c·∫ßn
            if img.mode == 'RGBA':
                # T·∫°o background tr·∫Øng
                background = Image.new('RGB', img.size, (255, 255, 255))
                # Paste h√¨nh ·∫£nh RGBA l√™n background
                background.paste(img, mask=img.split()[3])  # S·ª≠ d·ª•ng k√™nh alpha l√†m mask
                return background
            return img
        return None
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ·∫£nh t·ª´ URL: {e}")
        return None

def get_download_link(file_content, file_name, display_text):
    """T·∫°o link t·∫£i xu·ªëng cho c√°c file ƒë∆∞·ª£c t·∫°o."""
    b64 = base64.b64encode(file_content).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="{file_name}" class="download-button">{display_text}</a>'
    return href

def export_to_pdf(survey_data, images, panel_notes=None):
    """T·∫°o file PDF t·ª´ d·ªØ li·ªáu kh·∫£o s√°t."""
    # Import c√°c module c·∫ßn thi·∫øt
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    
    buffer = io.BytesIO()
    
    # C·ªë g·∫Øng ƒëƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
    try:
        # T√¨m ki·∫øm font ·ªü nhi·ªÅu v·ªã tr√≠
        font_paths = [
            'assets/DejaVuSans.ttf',
            'assets/fonts/DejaVuSans.ttf',
            'DejaVuSans.ttf',
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'  # Linux path
        ]
        
        font_registered = False
        for path in font_paths:
            try:
                pdfmetrics.registerFont(TTFont('DejaVuSans', path))
                font_registered = True
                break
            except:
                continue
                
        font_name = 'DejaVuSans' if font_registered else 'Helvetica'
    except:
        font_name = 'Helvetica'
    
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    
    # T·∫°o style cho ti√™u ƒë·ªÅ v√† n·ªôi dung
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontName=font_name,
        fontSize=16,
        alignment=1,
        spaceAfter=12
    )
    
    normal_style = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=10,
        spaceAfter=6
    )
    
    content = []
    
    # Ti√™u ƒë·ªÅ b√°o c√°o
    content.append(Paragraph("B√ÅO C√ÅO KH·∫¢O S√ÅT", title_style))
    content.append(Spacer(1, 20))
    
    # Th√¥ng tin c√¥ng ty v√† kh·∫£o s√°t
    header_data = [
        ["T√™n c√¥ng ty:", survey_data['header']['company_name']],
        ["ƒê·ªãa ch·ªâ:", survey_data['header']['address']],
        ["S·ªë ƒëi·ªán tho·∫°i:", survey_data['header']['phone']],
        ["Ng√†y kh·∫£o s√°t:", survey_data['header']['survey_date']],
    ]
    
    t = Table(header_data, colWidths=[120, 300])
    t.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, -1), font_name, 10),
        ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.white),
    ]))
    content.append(t)
    content.append(Spacer(1, 10))
    
    # Ng∆∞·ªùi tham gia
    content.append(Paragraph("Th√†nh vi√™n tham gia:", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name)))
    participants = survey_data['header']['participants'].split('\n')
    for p in participants:
        if p.strip():
            content.append(Paragraph(f"‚Ä¢ {p}", normal_style))
    content.append(Spacer(1, 10))
    
    # Ng∆∞·ªùi kh·∫£o s√°t
    content.append(Paragraph("Ng∆∞·ªùi kh·∫£o s√°t:", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name)))
    surveyors = survey_data['header']['surveyors'].split('\n')
    for s in surveyors:
        if s.strip():
            content.append(Paragraph(f"‚Ä¢ {s}", normal_style))
    content.append(Spacer(1, 20))
    
    # Chi ti·∫øt kh·∫£o s√°t
    content.append(Paragraph("CHI TI·∫æT KH·∫¢O S√ÅT", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
    content.append(Spacer(1, 10))
    
    detail_data = [
        ["Khu v·ª±c:", survey_data['detail'][0]],
        ["Thi·∫øt b·ªã:", survey_data['detail'][1]],
        ["M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:", survey_data['detail'][2]],
    ]
    
    t = Table(detail_data, colWidths=[150, 270])
    t.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, -1), font_name, 10),
        ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.white),
    ]))
    content.append(t)
    content.append(Spacer(1, 20))
    
    # H√¨nh ·∫£nh
    if images:
        content.append(Paragraph("H√åNH ·∫¢NH KH·∫¢O S√ÅT", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
        content.append(Spacer(1, 10))
        
        for i, img in enumerate(images):
            if img:
                # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                
                # Chuy·ªÉn ƒë·ªïi PIL Image sang bytesIO ƒë·ªÉ ReportLab c√≥ th·ªÉ s·ª≠ d·ª•ng
                img_byte_arr = io.BytesIO()
                img.save(img_byte_arr, format='JPEG')
                img_byte_arr.seek(0)
                
                # Th√™m caption cho h√¨nh ·∫£nh
                content.append(Paragraph(f"H√¨nh {i+1}:", normal_style))
                
                # T√≠nh to√°n k√≠ch th∆∞·ªõc ·∫£nh ph√π h·ª£p (t·ªëi ƒëa 400x300, gi·ªØ t·ª∑ l·ªá)
                img_width, img_height = img.size
                ratio = min(400/img_width, 300/img_height) if img_width > 0 and img_height > 0 else 1
                new_width = img_width * ratio
                new_height = img_height * ratio
                
                # Th√™m h√¨nh ·∫£nh v√†o t√†i li·ªáu PDF
                img_reportlab = RLImage(img_byte_arr, width=new_width, height=new_height)
                content.append(img_reportlab)
                content.append(Spacer(1, 10))
    
    # Panel Notes
    if panel_notes and len(panel_notes) > 0:
        content.append(Paragraph("PANEL NOTES", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
        content.append(Spacer(1, 10))
        
        for note_idx, note in enumerate(panel_notes):
            content.append(Paragraph(f"Panel Note #{note_idx+1}", ParagraphStyle('Heading3', parent=styles['Heading3'], fontName=font_name)))
            
            note_data = [
                ["Khu v·ª±c:", note['area']],
                ["Thi·∫øt b·ªã:", note['device']],
                ["M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:", note['findings']],
            ]
            
            t = Table(note_data, colWidths=[150, 270])
            t.setStyle(TableStyle([
                ('FONT', (0, 0), (-1, -1), font_name, 10),
                ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.white),
            ]))
            content.append(t)
            content.append(Spacer(1, 10))
            
            # H√¨nh ·∫£nh c·ªßa panel note
            if note.get('images') and len(note['images']) > 0:
                for img_idx, img_url in enumerate(note['images']):
                    img = load_image_from_url(img_url)
                    if img:
                        # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                        if img.mode == 'RGBA':
                            background = Image.new('RGB', img.size, (255, 255, 255))
                            background.paste(img, mask=img.split()[3])
                            img = background
                        
                        # Chuy·ªÉn ƒë·ªïi PIL Image sang bytesIO ƒë·ªÉ ReportLab c√≥ th·ªÉ s·ª≠ d·ª•ng
                        img_byte_arr = io.BytesIO()
                        img.save(img_byte_arr, format='JPEG')
                        img_byte_arr.seek(0)
                        
                        # Th√™m caption cho h√¨nh ·∫£nh
                        content.append(Paragraph(f"H√¨nh {note_idx+1}.{img_idx+1}:", normal_style))
                        
                        # T√≠nh to√°n k√≠ch th∆∞·ªõc ·∫£nh ph√π h·ª£p
                        img_width, img_height = img.size
                        ratio = min(400/img_width, 300/img_height) if img_width > 0 and img_height > 0 else 1
                        new_width = img_width * ratio
                        new_height = img_height * ratio
                        
                        # Th√™m h√¨nh ·∫£nh v√†o t√†i li·ªáu PDF
                        img_reportlab = RLImage(img_byte_arr, width=new_width, height=new_height)
                        content.append(img_reportlab)
                        content.append(Spacer(1, 10))
            
            content.append(Spacer(1, 10))
    
    # Th√™m ng√†y xu·∫•t b√°o c√°o
    current_date = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    content.append(Spacer(1, 20))
    content.append(Paragraph(f"B√°o c√°o ƒë∆∞·ª£c xu·∫•t ng√†y: {current_date}", normal_style))
    content.append(Paragraph(f"Ng∆∞·ªùi xu·∫•t b√°o c√°o: {st.session_state.user.get('full_name', '')}", normal_style))
    
    doc.build(content)
    pdf = buffer.getvalue()
    buffer.close()
    return pdf

def export_to_word(survey_data, images, panel_notes=None):
    """T·∫°o file Word t·ª´ d·ªØ li·ªáu kh·∫£o s√°t."""
    # Import c√°c module c·∫ßn thi·∫øt
    from docx import Document
    from docx.shared import Inches, Pt, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    
    doc = Document()
    
    # Thi·∫øt l·∫≠p font v√† c·ª° ch·ªØ m·∫∑c ƒë·ªãnh
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(12)
    
    # Ti√™u ƒë·ªÅ
    heading = doc.add_heading('B√ÅO C√ÅO KH·∫¢O S√ÅT', level=1)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Th√¥ng tin c√¥ng ty v√† kh·∫£o s√°t
    table = doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    
    rows = table.rows
    cells = rows[0].cells
    cells[0].text = 'T√™n c√¥ng ty:'
    cells[1].text = survey_data['header']['company_name']
    
    cells = rows[1].cells
    cells[0].text = 'ƒê·ªãa ch·ªâ:'
    cells[1].text = survey_data['header']['address']
    
    cells = rows[2].cells
    cells[0].text = 'S·ªë ƒëi·ªán tho·∫°i:'
    cells[1].text = survey_data['header']['phone']
    
    cells = rows[3].cells
    cells[0].text = 'Ng√†y kh·∫£o s√°t:'
    cells[1].text = survey_data['header']['survey_date']
    
    doc.add_paragraph('')
    
    # Ng∆∞·ªùi tham gia
    doc.add_heading('Th√†nh vi√™n tham gia:', level=2)
    participants = survey_data['header']['participants'].split('\n')
    for p in participants:
        if p.strip():
            doc.add_paragraph(f"‚Ä¢ {p}", style='List Bullet')
    
    # Ng∆∞·ªùi kh·∫£o s√°t
    doc.add_heading('Ng∆∞·ªùi kh·∫£o s√°t:', level=2)
    surveyors = survey_data['header']['surveyors'].split('\n')
    for s in surveyors:
        if s.strip():
            doc.add_paragraph(f"‚Ä¢ {s}", style='List Bullet')
    
    doc.add_paragraph('')
    
    # Chi ti·∫øt kh·∫£o s√°t
    heading = doc.add_heading('CHI TI·∫æT KH·∫¢O S√ÅT', level=2)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    table = doc.add_table(rows=3, cols=2)
    table.style = 'Table Grid'
    
    rows = table.rows
    cells = rows[0].cells
    cells[0].text = 'Khu v·ª±c:'
    cells[1].text = survey_data['detail'][0]
    
    cells = rows[1].cells
    cells[0].text = 'Thi·∫øt b·ªã:'
    cells[1].text = survey_data['detail'][1]
    
    cells = rows[2].cells
    cells[0].text = 'M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:'
    cells[1].text = survey_data['detail'][2]
    
    doc.add_paragraph('')
    
    # H√¨nh ·∫£nh
    if images:
        heading = doc.add_heading('H√åNH ·∫¢NH KH·∫¢O S√ÅT', level=2)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        for i, img in enumerate(images):
            if img:
                # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                if img.mode == 'RGBA':
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    background.paste(img, mask=img.split()[3])
                    img = background
                
                # L∆∞u ·∫£nh t·∫°m th·ªùi ƒë·ªÉ ch√®n v√†o Word
                img_byte_arr = io.BytesIO()
                img.save(img_byte_arr, format='JPEG')
                img_byte_arr.seek(0)
                
                # Th√™m caption v√† h√¨nh ·∫£nh
                doc.add_paragraph(f"H√¨nh {i+1}:")
                doc.add_picture(img_byte_arr, width=Inches(6))
                doc.add_paragraph('')
    
    # Panel Notes
    if panel_notes and len(panel_notes) > 0:
        heading = doc.add_heading('PANEL NOTES', level=2)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        for note_idx, note in enumerate(panel_notes):
            doc.add_heading(f"Panel Note #{note_idx+1}", level=3)
            
            table = doc.add_table(rows=3, cols=2)
            table.style = 'Table Grid'
            
            rows = table.rows
            cells = rows[0].cells
            cells[0].text = 'Khu v·ª±c:'
            cells[1].text = note['area']
            
            cells = rows[1].cells
            cells[0].text = 'Thi·∫øt b·ªã:'
            cells[1].text = note['device']
            
            cells = rows[2].cells
            cells[0].text = 'M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:'
            cells[1].text = note['findings']
            
            doc.add_paragraph('')
            
            # H√¨nh ·∫£nh c·ªßa panel note
            if note.get('images') and len(note['images']) > 0:
                for img_idx, img_url in enumerate(note['images']):
                    img = load_image_from_url(img_url)
                    if img:
                        # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                        if img.mode == 'RGBA':
                            background = Image.new('RGB', img.size, (255, 255, 255))
                            background.paste(img, mask=img.split()[3])
                            img = background
                        
                        # L∆∞u ·∫£nh t·∫°m th·ªùi ƒë·ªÉ ch√®n v√†o Word
                        img_byte_arr = io.BytesIO()
                        img.save(img_byte_arr, format='JPEG')
                        img_byte_arr.seek(0)
                        
                        # Th√™m caption v√† h√¨nh ·∫£nh
                        doc.add_paragraph(f"H√¨nh {note_idx+1}.{img_idx+1}:")
                        doc.add_picture(img_byte_arr, width=Inches(6))
                        doc.add_paragraph('')
            
            doc.add_paragraph('')
    
    # Th√™m ng√†y xu·∫•t b√°o c√°o
    current_date = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    doc.add_paragraph('')
    doc.add_paragraph(f"B√°o c√°o ƒë∆∞·ª£c xu·∫•t ng√†y: {current_date}")
    doc.add_paragraph(f"Ng∆∞·ªùi xu·∫•t b√°o c√°o: {st.session_state.user.get('full_name', '')}")
    
    # L∆∞u v√†o memory buffer
    buffer = io.BytesIO()
    doc.save(buffer)
    docx = buffer.getvalue()
    buffer.close()
    return docx

# --- H√†m x√≥a kh·∫£o s√°t ---
def delete_survey_from_supabase(supabase, survey_id):
    """X√≥a kh·∫£o s√°t t·ª´ Supabase"""
    if not supabase or not survey_id:
        return False
        
    try:
        # Ki·ªÉm tra quy·ªÅn n·∫øu kh√¥ng ph·∫£i admin
        if st.session_state.user["role"] != "admin":
            response = supabase.table('surveys').select('created_by').eq('id', survey_id).execute()
            if not response.data or response.data[0]["created_by"] != st.session_state.user["id"]:
                st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a kh·∫£o s√°t n√†y!")
                return False
        
        # X√≥a kh·∫£o s√°t (c√°c panel_notes s·∫Ω t·ª± ƒë·ªông b·ªã x√≥a do c√≥ constraint ON DELETE CASCADE)
        response = supabase.table('surveys').delete().eq('id', survey_id).execute()
        return True
    except Exception as e:
        st.error(f"L·ªói khi x√≥a kh·∫£o s√°t: {str(e)}")
        return False

# --- H√†m l·∫•y chi ti·∫øt kh·∫£o s√°t ---
def get_survey_detail(supabase, survey_id):
    """L·∫•y chi ti·∫øt kh·∫£o s√°t t·ª´ Supabase"""
    if not supabase or not survey_id:
        return None
        
    try:
        # L·∫•y th√¥ng tin kh·∫£o s√°t
        response = supabase.table('surveys').select('*').eq('id', survey_id).execute()
        if not response.data or len(response.data) == 0:
            st.error(f"Kh√¥ng t√¨m th·∫•y kh·∫£o s√°t ID: {survey_id}")
            return None
            
        survey = response.data[0]
        
        # L·∫•y danh s√°ch panel notes
        panel_notes_response = supabase.table('panel_notes').select('*').eq('survey_id', survey_id).execute()
        panel_notes = panel_notes_response.data if panel_notes_response.data else []
        
        # T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
        survey_data = {
            'header': {
                'company_name': survey['company_name'],
                'address': survey['address'],
                'phone': survey['phone'],
                'survey_date': survey['survey_date'],
                'participants': survey['participants'],
                'surveyors': survey['surveyors']
            },
            'detail': [
                survey['area'],
                survey['device'],
                survey['findings']
            ],
            'image_urls': survey['images'] if survey['images'] else [],
            'panel_notes': panel_notes
        }
        
        return survey_data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y chi ti·∫øt kh·∫£o s√°t: {str(e)}")
        st.error(traceback.format_exc())
        return None

# Giao di·ªán ch√≠nh
st.title("üìã Xem danh s√°ch kh·∫£o s√°t")

# K·∫øt n·ªëi Supabase
supabase = init_supabase()

if not supabase:
    st.error("üò¢ Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu Supabase.")
    st.warning("Vui l√≤ng c·∫•u h√¨nh k·∫øt n·ªëi Supabase trong Streamlit Secrets.")
    st.stop()

# Th√™m n√∫t t·∫°o kh·∫£o s√°t m·ªõi
if st.button("‚ûï T·∫°o kh·∫£o s√°t m·ªõi"):
    # X√≥a ID kh·∫£o s√°t ƒëang ch·ªânh s·ª≠a n·∫øu c√≥
    if 'editing_survey_id' in st.session_state:
        st.session_state.editing_survey_id = None
    # Chuy·ªÉn ƒë·∫øn trang nh·∫≠p li·ªáu
    try:
        st.switch_page("../Getnotes_Onsite.py")
    except Exception:
        try:
            st.switch_page("Getnotes_Onsite.py")
        except Exception:
            st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang nh·∫≠p li·ªáu. Vui l√≤ng quay l·∫°i trang ch·ªß.")

# T·∫°o tab cho c√°c ch·ª©c nƒÉng
tab1, tab2 = st.tabs(["Danh s√°ch kh·∫£o s√°t", "T√¨m ki·∫øm"])

with tab1:
    st.subheader("Danh s√°ch kh·∫£o s√°t")
    
    # Filter theo ng∆∞·ªùi t·∫°o
    view_options = ["T·∫•t c·∫£ kh·∫£o s√°t", "Kh·∫£o s√°t c·ªßa t√¥i"]
    if st.session_state.user["role"] == "admin":
        selected_view = st.radio("Hi·ªÉn th·ªã:", view_options)
    else:
        selected_view = "Kh·∫£o s√°t c·ªßa t√¥i"
    
    # L·∫•y danh s√°ch kh·∫£o s√°t t·ª´ Supabase
    try:
        if selected_view == "T·∫•t c·∫£ kh·∫£o s√°t" and st.session_state.user["role"] == "admin":
            # Admin xem t·∫•t c·∫£ c√°c kh·∫£o s√°t
            response = supabase.table('surveys').select('*, users!inner(full_name)').order('created_at', desc=True).execute()
        else:
            # Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng ch·ªâ xem c√°c kh·∫£o s√°t c·ªßa m√¨nh
            response = supabase.table('surveys').select('*, users!inner(full_name)').eq('created_by', st.session_state.user["id"]).order('created_at', desc=True).execute()
        
        if response.data and len(response.data) > 0:
            st.write(f"T√¨m th·∫•y {len(response.data)} kh·∫£o s√°t")
            
            # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng
            surveys = []
            for survey in response.data:
                created_at = datetime.datetime.fromisoformat(survey['created_at'].replace('Z', '+00:00'))
                formatted_date = created_at.strftime("%d/%m/%Y %H:%M")
                
                surveys.append({
                    "ID": survey['id'],
                    "C√¥ng ty": survey['company_name'],
                    "Ng√†y kh·∫£o s√°t": survey['survey_date'],
                    "Ng∆∞·ªùi t·∫°o": survey['users']['full_name'],
                    "Th·ªùi gian t·∫°o": formatted_date
                })
            
            # Hi·ªÉn th·ªã b·∫£ng kh·∫£o s√°t
            st.dataframe(surveys, use_container_width=True)
            
            # Ch·ªçn kh·∫£o s√°t ƒë·ªÉ xem chi ti·∫øt
            survey_ids = [s['id'] for s in response.data]
            survey_names = [f"{s['company_name']} ({s['survey_date']})" for s in response.data]
            options = dict(zip(survey_ids, survey_names))
            
            selected_survey = st.selectbox("Ch·ªçn kh·∫£o s√°t ƒë·ªÉ xem chi ti·∫øt:", survey_ids, format_func=lambda x: options[x])
            
            if selected_survey:
                st.subheader("Thao t√°c")
                
                # N√∫t xem chi ti·∫øt, ch·ªânh s·ª≠a v√† x√≥a
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button("üìÑ Xem chi ti·∫øt", key="view_btn"):
                        st.session_state.selected_survey_id = selected_survey
                        
                with col2:
                    if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a", key="edit_btn"):
                        # Ki·ªÉm tra quy·ªÅn n·∫øu kh√¥ng ph·∫£i admin
                        if st.session_state.user["role"] != "admin":
                            selected_survey_data = [s for s in response.data if s['id'] == selected_survey][0]
                            if selected_survey_data["created_by"] != st.session_state.user["id"]:
                                st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kh·∫£o s√°t n√†y!")
                                st.stop()
                        
                        # Thi·∫øt l·∫≠p ID kh·∫£o s√°t ƒë·ªÉ ch·ªânh s·ª≠a
                        st.session_state.editing_survey_id = selected_survey
                        # Chuy·ªÉn ƒë·∫øn trang nh·∫≠p li·ªáu
                        try:
                            st.switch_page("../Getnotes_Onsite.py")
                        except Exception:
                            try:
                                st.switch_page("Getnotes_Onsite.py")
                            except Exception:
                                st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang nh·∫≠p li·ªáu. Vui l√≤ng quay l·∫°i trang ch·ªß.")
                        
                with col3:
                    if st.button("üóëÔ∏è X√≥a", key="delete_btn"):
                        # T·∫°o h·ªôp tho·∫°i x√°c nh·∫≠n
                        st.session_state.confirm_delete = selected_survey
                
                # X√°c nh·∫≠n x√≥a
                if 'confirm_delete' in st.session_state and st.session_state.confirm_delete:
                    confirm_col1, confirm_col2 = st.columns(2)
                    with confirm_col1:
                        if st.button("‚úì X√°c nh·∫≠n x√≥a", key="confirm_delete_btn"):
                            if delete_survey_from_supabase(supabase, st.session_state.confirm_delete):
                                st.success(f"ƒê√£ x√≥a kh·∫£o s√°t ID: {st.session_state.confirm_delete}")
                                st.session_state.confirm_delete = None
                                st.rerun()
                            else:
                                st.error("Kh√¥ng th·ªÉ x√≥a kh·∫£o s√°t")
                                
                    with confirm_col2:
                        if st.button("‚úó H·ªßy", key="cancel_delete_btn"):
                            st.session_state.confirm_delete = None
                            st.rerun()
                
                # Hi·ªÉn th·ªã chi ti·∫øt kh·∫£o s√°t n·∫øu ƒë√£ ch·ªçn
                if 'selected_survey_id' in st.session_state and st.session_state.selected_survey_id:
                    st.subheader("Chi ti·∫øt kh·∫£o s√°t")
                    
                    # L·∫•y d·ªØ li·ªáu kh·∫£o s√°t
                    survey_data = get_survey_detail(supabase, st.session_state.selected_survey_id)
                    
                    if survey_data:
                        # Hi·ªÉn th·ªã th√¥ng tin
                        st.write("### Th√¥ng tin c√¥ng ty")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**T√™n c√¥ng ty:** {survey_data['header']['company_name']}")
                            st.write(f"**ƒê·ªãa ch·ªâ:** {survey_data['header']['address']}")
                        with col2:
                            st.write(f"**S·ªë ƒëi·ªán tho·∫°i:** {survey_data['header']['phone']}")
                            st.write(f"**Ng√†y kh·∫£o s√°t:** {survey_data['header']['survey_date']}")
                        
                        st.write("### Th√†nh vi√™n tham gia")
                        participants = survey_data['header']['participants'].split('\n')
                        for p in participants:
                            if p.strip():
                                st.write(f"‚Ä¢ {p}")
                        
                        st.write("### Ng∆∞·ªùi kh·∫£o s√°t")
                        surveyors = survey_data['header']['surveyors'].split('\n')
                        for s in surveyors:
                            if s.strip():
                                st.write(f"‚Ä¢ {s}")
                        
                        st.write("### Chi ti·∫øt kh·∫£o s√°t")
                        st.write(f"**Khu v·ª±c:** {survey_data['detail'][0]}")
                        st.write(f"**Thi·∫øt b·ªã:** {survey_data['detail'][1]}")
                        st.write(f"**M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:** {survey_data['detail'][2]}")
                        
                        # Hi·ªÉn th·ªã h√¨nh ·∫£nh
                        if survey_data['image_urls'] and len(survey_data['image_urls']) > 0:
                            st.write("### H√¨nh ·∫£nh kh·∫£o s√°t")
                            img_cols = st.columns(min(3, len(survey_data['image_urls'])))
                            for idx, img_url in enumerate(survey_data['image_urls']):
                                with img_cols[idx % 3]:
                                    st.image(img_url, caption=f"H√¨nh {idx+1}", width=200)
                        
                        # Hi·ªÉn th·ªã panel notes
                        if survey_data['panel_notes'] and len(survey_data['panel_notes']) > 0:
                            st.write("### Panel Notes")
                            
                            for idx, note in enumerate(survey_data['panel_notes']):
                                with st.expander(f"Panel Note #{idx+1}", expanded=False):
                                    st.write(f"**Khu v·ª±c:** {note['area']}")
                                    st.write(f"**Thi·∫øt b·ªã:** {note['device']}")
                                    st.write(f"**M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:** {note['findings']}")
                                    
                                    # Hi·ªÉn th·ªã h√¨nh ·∫£nh c·ªßa panel note
                                    if note.get('images') and len(note['images']) > 0:
                                        st.write("#### H√¨nh ·∫£nh")
                                        note_img_cols = st.columns(min(3, len(note['images'])))
                                        for img_idx, img_url in enumerate(note['images']):
                                            with note_img_cols[img_idx % 3]:
                                                st.image(img_url, caption=f"H√¨nh {img_idx+1}", width=200)
                        
                        # N√∫t xu·∫•t b√°o c√°o
                        st.subheader("Xu·∫•t b√°o c√°o")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            if st.button("üìÑ Xu·∫•t file PDF"):
                                with st.spinner("ƒêang t·∫°o file PDF..."):
                                    # T·∫£i h√¨nh ·∫£nh t·ª´ URL
                                    images = []
                                    for url in survey_data['image_urls']:
                                        img = load_image_from_url(url)
                                        if img:
                                            images.append(img)
                                    
                                    # T·∫°o file PDF
                                    pdf_data = export_to_pdf(survey_data, images, survey_data['panel_notes'])
                                    
                                    # T·∫°o t√™n file
                                    company_name_safe = survey_data['header']['company_name'].replace(' ', '_')
                                    date_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                                    filename = f"bao_cao_khao_sat_{company_name_safe}_{date_str}.pdf"
                                    
                                    # Hi·ªÉn th·ªã link t·∫£i xu·ªëng
                                    st.markdown(
                                        get_download_link(pdf_data, filename, "üì• T·∫£i xu·ªëng file PDF"),
                                        unsafe_allow_html=True
                                    )
                        
                        with col2:
                            if st.button("üìÑ Xu·∫•t file Word"):
                                with st.spinner("ƒêang t·∫°o file Word..."):
                                    # T·∫£i h√¨nh ·∫£nh t·ª´ URL
                                    images = []
                                    for url in survey_data['image_urls']:
                                        img = load_image_from_url(url)
                                        if img:
                                            images.append(img)
                                    
                                    # T·∫°o file Word
                                    docx_data = export_to_word(survey_data, images, survey_data['panel_notes'])
                                    
                                    # T·∫°o t√™n file
                                    company_name_safe = survey_data['header']['company_name'].replace(' ', '_')
                                    date_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                                    filename = f"bao_cao_khao_sat_{company_name_safe}_{date_str}.docx"
                                    
                                    # Hi·ªÉn th·ªã link t·∫£i xu·ªëng
                                    st.markdown(
                                        get_download_link(docx_data, filename, "üì• T·∫£i xu·ªëng file Word"),
                                        unsafe_allow_html=True
                                    )
                    else:
                        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh·∫£o s√°t")
        else:
            st.info("Kh√¥ng c√≥ kh·∫£o s√°t n√†o. Nh·∫•n n√∫t 'T·∫°o kh·∫£o s√°t m·ªõi' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i danh s√°ch kh·∫£o s√°t: {str(e)}")
        st.error(traceback.format_exc())

with tab2:
    st.subheader("T√¨m ki·∫øm kh·∫£o s√°t")
    
    search_term = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm:")
    search_type = st.radio("T√¨m ki·∫øm theo:", ["T√™n c√¥ng ty", "Khu v·ª±c", "Thi·∫øt b·ªã", "M√¥ t·∫£"])
    
    if st.button("üîç T√¨m ki·∫øm"):
        if search_term:
            try:
                # X√°c ƒë·ªãnh tr∆∞·ªùng t√¨m ki·∫øm
                search_field = "company_name"
                if search_type == "Khu v·ª±c":
                    search_field = "area"
                elif search_type == "Thi·∫øt b·ªã":
                    search_field = "device"
                elif search_type == "M√¥ t·∫£":
                    search_field = "findings"
                
                # Th·ª±c hi·ªán t√¨m ki·∫øm
                if st.session_state.user["role"] == "admin":
                    # Admin c√≥ th·ªÉ t√¨m ki·∫øm t·∫•t c·∫£ c√°c kh·∫£o s√°t
                    response = supabase.table('surveys').select('*, users!inner(full_name)').ilike(search_field, f"%{search_term}%").order('created_at', desc=True).execute()
                else:
                    # Ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng ch·ªâ t√¨m ki·∫øm trong c√°c kh·∫£o s√°t c·ªßa m√¨nh
                    response = supabase.table('surveys').select('*, users!inner(full_name)').eq('created_by', st.session_state.user["id"]).ilike(search_field, f"%{search_term}%").order('created_at', desc=True).execute()
                
                if response.data and len(response.data) > 0:
                    st.write(f"T√¨m th·∫•y {len(response.data)} k·∫øt qu·∫£")
                    
                    # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng
                    search_results = []
                    for survey in response.data:
                        created_at = datetime.datetime.fromisoformat(survey['created_at'].replace('Z', '+00:00'))
                        formatted_date = created_at.strftime("%d/%m/%Y %H:%M")
                        
                        search_results.append({
                            "ID": survey['id'],
                            "C√¥ng ty": survey['company_name'],
                            "Khu v·ª±c": survey['area'],
                            "Thi·∫øt b·ªã": survey['device'],
                            "Ng√†y kh·∫£o s√°t": survey['survey_date'],
                            "Ng∆∞·ªùi t·∫°o": survey['users']['full_name'],
                            "Th·ªùi gian t·∫°o": formatted_date
                        })
                    
                    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£ t√¨m ki·∫øm
                    st.dataframe(search_results, use_container_width=True)
                    
                    # Ch·ªçn kh·∫£o s√°t ƒë·ªÉ xem chi ti·∫øt
                    survey_ids = [s['id'] for s in response.data]
                    survey_names = [f"{s['company_name']} ({s['survey_date']})" for s in response.data]
                    options = dict(zip(survey_ids, survey_names))
                    
                    selected_survey = st.selectbox("Ch·ªçn kh·∫£o s√°t ƒë·ªÉ xem chi ti·∫øt:", survey_ids, format_func=lambda x: options[x], key="search_select")
                    
                    if selected_survey:
                        if st.button("üìÑ Xem chi ti·∫øt", key="search_view_btn"):
                            st.session_state.selected_survey_id = selected_survey
                            st.rerun()
                else:
                    st.info(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho t·ª´ kh√≥a '{search_term}'")
            except Exception as e:
                st.error(f"L·ªói khi t√¨m ki·∫øm: {str(e)}")
                st.error(traceback.format_exc())