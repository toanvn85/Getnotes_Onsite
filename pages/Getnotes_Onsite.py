import streamlit as st

# QUAN TR·ªåNG: set_page_config() ph·∫£i l√† l·ªánh Streamlit ƒë·∫ßu ti√™n
st.set_page_config(page_title="Nh·∫≠p th√¥ng tin Kh·∫£o s√°t", layout="wide", page_icon="üìã")

# Ti·∫øp theo m·ªõi l√† import c√°c th∆∞ vi·ªán
import os
import io
import json
import base64
import datetime
import traceback
import uuid
from PIL import Image
import pillow_heif
import requests
from supabase import create_client, Client

# --- Ki·ªÉm tra ƒëƒÉng nh·∫≠p ---
if 'user' not in st.session_state or not st.session_state.user:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng App")
    if st.button("ƒêi ƒë·∫øn trang ƒëƒÉng nh·∫≠p"):
        try:
            st.switch_page("Home.py")
        except Exception:
            try:
                st.switch_page("pages/view_surveys.py")
            except Exception:
                st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p. Vui l√≤ng quay l·∫°i trang ch·ªß.")
    st.stop()

# [Ph·∫ßn c√≤n l·∫°i c·ªßa code gi·ªØ nguy√™n]

# --- Kh·ªüi t·∫°o Session State ---
if 'participant_inputs' not in st.session_state:
    st.session_state.participant_inputs = [""]
if 'surveyor_inputs' not in st.session_state:
    st.session_state.surveyor_inputs = [""]
if 'image_uploader_count' not in st.session_state:
    st.session_state.image_uploader_count = 2
if 'uploaded_images' not in st.session_state:
    st.session_state.uploaded_images = {}
if 'survey_data' not in st.session_state:
    st.session_state.survey_data = None
if 'editing_survey_id' not in st.session_state:
    st.session_state.editing_survey_id = None
if 'panel_notes' not in st.session_state:
    st.session_state.panel_notes = []
if 'panel_images' not in st.session_state:
    st.session_state.panel_images = {}

# --- H√†m ti·ªán √≠ch ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi tham gia v√† ng∆∞·ªùi kh·∫£o s√°t ---
def add_participant_input():
    st.session_state.participant_inputs.append("")

def add_surveyor_input():
    st.session_state.surveyor_inputs.append("")

# --- H√†m ti·ªán √≠ch ƒë·ªÉ qu·∫£n l√Ω upload ·∫£nh ---
def add_image_uploader():
    st.session_state.image_uploader_count += 1

def remove_image_uploader(index):
    if f"image_{index}" in st.session_state.uploaded_images:
        del st.session_state.uploaded_images[f"image_{index}"]
    
    # Reindex c√°c ·∫£nh c√≤n l·∫°i
    new_uploaded_images = {}
    new_idx = 0
    for i in range(st.session_state.image_uploader_count):
        if i != index and f"image_{i}" in st.session_state.uploaded_images:
            new_uploaded_images[f"image_{new_idx}"] = st.session_state.uploaded_images[f"image_{i}"]
            new_idx += 1
    
    st.session_state.uploaded_images = new_uploaded_images
    if st.session_state.image_uploader_count > 1:  # ƒê·∫£m b·∫£o lu√¥n c√≥ √≠t nh·∫•t m·ªôt uploader
        st.session_state.image_uploader_count -= 1

# --- H√†m ti·ªán √≠ch ƒë·ªÉ qu·∫£n l√Ω Panel Notes ---
def add_panel_note():
    note_id = str(uuid.uuid4())
    st.session_state.panel_notes.append({
        "id": note_id,
        "area": "",
        "device": "",
        "findings": "",
        "images": []
    })
    # Kh·ªüi t·∫°o m·ªôt t·ª´ ƒëi·ªÉn v·ªõi ƒë√∫ng 2 tr∆∞·ªùng uploader ·∫£nh cho note m·ªõi
    st.session_state.panel_images[note_id] = {
        "image_0": None,
        "image_1": None
    }

def remove_panel_note(index):
    if index < len(st.session_state.panel_notes):
        note_id = st.session_state.panel_notes[index]["id"]
        # X√≥a d·ªØ li·ªáu ·∫£nh c·ªßa panel note
        if note_id in st.session_state.panel_images:
            del st.session_state.panel_images[note_id]
        # X√≥a panel note kh·ªèi danh s√°ch
        st.session_state.panel_notes.pop(index)

def add_panel_image(note_id):
    # ƒê·∫øm s·ªë l∆∞·ª£ng ·∫£nh hi·ªán c√≥ trong panel note
    image_count = len(st.session_state.panel_images.get(note_id, {}))
    # Th√™m m·ªôt slot tr·ªëng cho ·∫£nh m·ªõi
    st.session_state.panel_images.setdefault(note_id, {})[f"image_{image_count}"] = None

def remove_panel_image(note_id, image_key):
    if note_id in st.session_state.panel_images and image_key in st.session_state.panel_images[note_id]:
        del st.session_state.panel_images[note_id][image_key]

# --- K·∫øt n·ªëi Supabase ---
def init_supabase():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi Supabase"""
    try:
        if "supabase" not in st.secrets:
            st.error("üîë Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh Supabase!")
            return None
            
        url = st.secrets["supabase"]["url"]
        key = st.secrets["supabase"]["key"]
        
        if not url or not key:
            st.error("üîë URL ho·∫∑c key Supabase kh√¥ng h·ª£p l·ªá!")
            return None
            
        # K·∫øt n·ªëi
        client = create_client(url, key)
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        try:
            # Th·ª≠ truy v·∫•n ƒë∆°n gi·∫£n ƒë·ªÉ x√°c minh k·∫øt n·ªëi
            response = client.table('surveys').select('id').limit(1).execute()
            return client
        except Exception as e:
            st.error(f"‚ùå K·∫øt n·ªëi ƒë·∫øn Supabase th·∫•t b·∫°i: {e}")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Supabase: {e}")
        return None

# --- H√†m x·ª≠ l√Ω ·∫£nh ---
def convert_heic_to_jpeg(file_object):
    """Chuy·ªÉn ƒë·ªïi ·∫£nh HEIC sang JPEG"""
    try:
        heif_file = pillow_heif.read_heif(file_object.read())
        image = Image.frombytes(
            heif_file.mode,
            heif_file.size,
            heif_file.data,
            "raw"
        )
        output = io.BytesIO()
        image.save(output, format="JPEG")
        output.seek(0)
        return output
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi .heic -> .jpg: {e}")
        return None

def upload_image_to_supabase(supabase, file_object):
    """T·∫£i ·∫£nh l√™n Supabase Storage v√† tr·∫£ v·ªÅ URL"""
    if not supabase or not file_object:
        return None
        
    try:
        # S·ª≠a t√™n bucket ƒë·ªÉ kh·ªõp v·ªõi t√™n hi·ªán c√≥ tr√™n Supabase
        bucket_name = "serveyimages"  # T√™n bucket ƒë√£ t·ªìn t·∫°i
        
        file_ext = file_object.name.lower().split('.')[-1]
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        # Th√™m m·ªôt m√£ UUID ng·∫´u nhi√™n v√†o t√™n file ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh duy nh·∫•t
        random_id = str(uuid.uuid4())[:8]  # L·∫•y 8 k√Ω t·ª± ƒë·∫ßu c·ªßa UUID
        unique_filename = f"{timestamp}_{random_id}_{file_object.name.replace(' ', '_')}"
        
        # X·ª≠ l√Ω file
        try:
            # Reset con tr·ªè file
            file_object.seek(0)
            img = Image.open(file_object)
            
            # X·ª≠ l√Ω HEIC/HEIF ho·∫∑c chuy·ªÉn ƒë·ªïi RGBA sang RGB
            if file_ext in ['heic', 'heif']:
                file_object.seek(0)
                converted_image = convert_heic_to_jpeg(file_object)
                if not converted_image:
                    return None
                file_content = converted_image.getvalue()
                unique_filename = unique_filename.rsplit('.', 1)[0] + '.jpg'
            elif img.mode == 'RGBA':
                # Chuy·ªÉn ƒë·ªïi RGBA sang RGB v·ªõi background tr·∫Øng
                background = Image.new('RGB', img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[3])
                # L∆∞u d∆∞·ªõi d·∫°ng JPEG
                output = io.BytesIO()
                background.save(output, format='JPEG')
                output.seek(0)
                file_content = output.getvalue()
                unique_filename = unique_filename.rsplit('.', 1)[0] + '.jpg'
            else:
                # C√°c ƒë·ªãnh d·∫°ng kh√°c, s·ª≠ d·ª•ng nguy√™n b·∫£n
                file_object.seek(0)
                file_content = file_object.read()
        except Exception as e:
            # N·∫øu kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh, s·ª≠ d·ª•ng file g·ªëc
            st.warning(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω ·∫£nh. S·ª≠ d·ª•ng file g·ªëc: {e}")
            file_object.seek(0)
            file_content = file_object.read()
        
        # Upload l√™n Supabase Storage
        supabase.storage.from_(bucket_name).upload(
            path=unique_filename,
            file=file_content,
            file_options={"content-type": f"image/{file_ext if file_ext != 'jpg' else 'jpeg'}"}
        )
        
        # L·∫•y URL c√¥ng khai
        file_url = supabase.storage.from_(bucket_name).get_public_url(unique_filename)
        return file_url
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ·∫£nh l√™n: {str(e)}")
        st.error(traceback.format_exc())
        return None

def process_image_for_export(file):
    """X·ª≠ l√Ω file ·∫£nh ƒë·ªÉ s·ª≠ d·ª•ng trong export PDF v√† Word"""
    if file is None:
        return None
    
    file_ext = file.name.lower().split('.')[-1]
    
    try:
        if file_ext in ['heic', 'heif']:
            # Reset con tr·ªè file
            file.seek(0)
            converted_image = convert_heic_to_jpeg(file)
            if converted_image:
                return Image.open(converted_image)
            return None
        else:
            # Reset con tr·ªè file
            file.seek(0)
            img = Image.open(file)
            
            # Chuy·ªÉn ƒë·ªïi RGBA sang RGB n·∫øu c·∫ßn
            if img.mode == 'RGBA':
                background = Image.new('RGB', img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[3])
                return background
            
            return img
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}")
        return None

def load_image_from_url(url):
    """T·∫£i v√† x·ª≠ l√Ω ·∫£nh t·ª´ URL ƒë·ªÉ s·ª≠ d·ª•ng trong export"""
    try:
        response = requests.get(url)
        if response.status_code == 200:
            img = Image.open(io.BytesIO(response.content))
            
            # Chuy·ªÉn ƒë·ªïi RGBA sang RGB n·∫øu c·∫ßn
            if img.mode == 'RGBA':
                # T·∫°o background tr·∫Øng
                background = Image.new('RGB', img.size, (255, 255, 255))
                # Paste h√¨nh ·∫£nh RGBA l√™n background
                background.paste(img, mask=img.split()[3])  # S·ª≠ d·ª•ng k√™nh alpha l√†m mask
                return background
            return img
        return None
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ·∫£nh t·ª´ URL: {e}")
        return None

# --- H√†m l∆∞u d·ªØ li·ªáu v√† xu·∫•t b√°o c√°o ---
def save_survey_data_to_supabase(supabase, header_data, detail_data, image_urls=None, panel_notes=None, survey_id=None):
    """L∆∞u d·ªØ li·ªáu kh·∫£o s√°t v√†o Supabase"""
    if not supabase:
        return None
        
    try:
        # T·∫°o ƒë·ªëi t∆∞·ª£ng d·ªØ li·ªáu kh·∫£o s√°t
        survey_data = {
            "company_name": header_data["company_name"],
            "address": header_data["address"],
            "phone": header_data["phone"],
            "survey_date": header_data["survey_date"],
            "participants": header_data["participants"],
            "surveyors": header_data["surveyors"],
            "created_by": st.session_state.user["id"],
            "area": detail_data[0],
            "device": detail_data[1],
            "findings": detail_data[2],
            "images": image_urls if image_urls else []
        }
        
        # Insert ho·∫∑c Update d·ªØ li·ªáu trong Supabase
        if survey_id:
            # Ki·ªÉm tra quy·ªÅn n·∫øu kh√¥ng ph·∫£i admin
            if st.session_state.user["role"] != "admin":
                response = supabase.table('surveys').select('created_by').eq('id', survey_id).execute()
                if not response.data or response.data[0]["created_by"] != st.session_state.user["id"]:
                    st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kh·∫£o s√°t n√†y!")
                    return None
            
            # C·∫≠p nh·∫≠t kh·∫£o s√°t hi·ªán c√≥
            response = supabase.table('surveys').update(survey_data).eq('id', survey_id).execute()
            st.success(f"‚úÖ Kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
            
            # X√≥a c√°c panel notes c≈©
            supabase.table('panel_notes').delete().eq('survey_id', survey_id).execute()
        else:
            # T·∫°o kh·∫£o s√°t m·ªõi
            response = supabase.table('surveys').insert(survey_data).execute()
        
        if response.data:
            survey_id = response.data[0].get('id')
            
            # L∆∞u c√°c panel notes
            if panel_notes:
                for note in panel_notes:
                    note_data = {
                        "survey_id": survey_id,
                        "area": note["area"],
                        "device": note["device"],
                        "findings": note["findings"],
                        "images": note["images"],
                        "created_by": st.session_state.user["id"]
                    }
                    supabase.table('panel_notes').insert(note_data).execute()
            
            return survey_id
        else:
            st.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ Supabase")
            return None
            
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu v√†o Supabase: {str(e)}")
        st.error(traceback.format_exc())
        return None

def delete_survey_from_supabase(supabase, survey_id):
    """X√≥a kh·∫£o s√°t t·ª´ Supabase"""
    if not supabase or not survey_id:
        return False
        
    try:
        # Ki·ªÉm tra quy·ªÅn n·∫øu kh√¥ng ph·∫£i admin
        if st.session_state.user["role"] != "admin":
            response = supabase.table('surveys').select('created_by').eq('id', survey_id).execute()
            if not response.data or response.data[0]["created_by"] != st.session_state.user["id"]:
                st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a kh·∫£o s√°t n√†y!")
                return False
        
        # X√≥a kh·∫£o s√°t (c√°c panel_notes s·∫Ω t·ª± ƒë·ªông b·ªã x√≥a do c√≥ constraint ON DELETE CASCADE)
        response = supabase.table('surveys').delete().eq('id', survey_id).execute()
        return True
    except Exception as e:
        st.error(f"L·ªói khi x√≥a kh·∫£o s√°t: {str(e)}")
        return False

def get_download_link(file_content, file_name, display_text):
    """T·∫°o link t·∫£i xu·ªëng cho c√°c file ƒë∆∞·ª£c t·∫°o."""
    b64 = base64.b64encode(file_content).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="{file_name}" class="download-button">{display_text}</a>'
    return href

def export_to_pdf(survey_data, images, panel_notes=None):
    """T·∫°o file PDF t·ª´ d·ªØ li·ªáu kh·∫£o s√°t."""
    # Import c√°c module c·∫ßn thi·∫øt
    from reportlab.lib.pagesizes import A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image as RLImage
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import os
    
    buffer = io.BytesIO()
    
    # ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
    try:
        # Thi·∫øt l·∫≠p c√°c ƒë∆∞·ªùng d·∫´n font c√≥ th·ªÉ c√≥
        current_dir = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()
        
        # Danh s√°ch font ƒë·ªÉ th·ª≠
        font_files = [
            ('TimesTiengViet', 'times.ttf', 'Times New Roman'),
            ('Arial', 'arial.ttf', 'Arial'),
            ('DejaVuSans', 'DejaVuSans.ttf', 'DejaVuSans'),
        ]
        
        # C√°c ƒë∆∞·ªùng d·∫´n c√≥ th·ªÉ ch·ª©a font
        possible_paths = [
            os.path.join(current_dir, 'assets', 'fonts'),
            os.path.join(current_dir, 'assets'),
            current_dir,
            '/usr/share/fonts/truetype',
            '/usr/share/fonts/truetype/dejavu',
            '/usr/share/fonts/TTF',
            'C:\\Windows\\Fonts',  # ƒê∆∞·ªùng d·∫´n Windows
        ]
        
        # Th·ª≠ ƒëƒÉng k√Ω t·ª´ng font
        font_registered = False
        font_name = 'Times-Roman'  # Font m·∫∑c ƒë·ªãnh c·ªßa ReportLab
        
        for font_key, font_file, display_name in font_files:
            if font_registered:
                break
                
            for path in possible_paths:
                try:
                    full_path = os.path.join(path, font_file)
                    if os.path.exists(full_path):
                        pdfmetrics.registerFont(TTFont(font_key, full_path))
                        font_name = font_key
                        font_registered = True
                        st.success(f"ƒê√£ ƒëƒÉng k√Ω font {display_name} t·ª´ {full_path}")
                        break
                except Exception as e:
                    continue
        
        # N·∫øu kh√¥ng ƒëƒÉng k√Ω ƒë∆∞·ª£c font t√πy ch·ªânh, s·ª≠ d·ª•ng font c√≥ s·∫µn trong ReportLab
        if not font_registered:
            font_name = 'Times-Roman'  # Times-Roman l√† font c√≥ s·∫µn trong ReportLab, t∆∞∆°ng t·ª± Times New Roman
            st.info(f"S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh: {font_name}")
    except Exception as e:
        st.write(f"L·ªói khi ƒëƒÉng k√Ω font: {e}")
        font_name = 'Times-Roman'  # M·∫∑c ƒë·ªãnh ·ªü ƒë√¢y c≈©ng l√† Times-Roman
    
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    
    # T·∫°o style cho ti√™u ƒë·ªÅ v√† n·ªôi dung
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontName=font_name,
        fontSize=16,
        alignment=1,
        spaceAfter=12
    )
    
    normal_style = ParagraphStyle(
        'Normal',
        parent=styles['Normal'],
        fontName=font_name,
        fontSize=10,
        spaceAfter=6
    )
    
    content = []
    
    # Ti√™u ƒë·ªÅ b√°o c√°o
    content.append(Paragraph("B√ÅO C√ÅO KH·∫¢O S√ÅT ISO 50001:2018", title_style))
    content.append(Spacer(1, 20))
    
    # Th√¥ng tin c√¥ng ty v√† kh·∫£o s√°t
    header_data = [
        ["T√™n c√¥ng ty:", survey_data['header']['company_name']],
        ["ƒê·ªãa ch·ªâ:", survey_data['header']['address']],
        ["S·ªë ƒëi·ªán tho·∫°i:", survey_data['header']['phone']],
        ["Ng√†y kh·∫£o s√°t:", survey_data['header']['survey_date']],
    ]
    
    t = Table(header_data, colWidths=[120, 300])
    t.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, -1), font_name, 10),
        ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
    ]))
    content.append(t)
    content.append(Spacer(1, 10))
    
    # Ng∆∞·ªùi tham gia
    content.append(Paragraph("Th√†nh vi√™n tham gia:", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name)))
    participants = survey_data['header']['participants'].split('\n')
    for p in participants:
        if p.strip():
            content.append(Paragraph(f"‚Ä¢ {p}", normal_style))
    content.append(Spacer(1, 10))
    
    # Ng∆∞·ªùi kh·∫£o s√°t
    content.append(Paragraph("Ng∆∞·ªùi kh·∫£o s√°t:", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name)))
    surveyors = survey_data['header']['surveyors'].split('\n')
    for s in surveyors:
        if s.strip():
            content.append(Paragraph(f"‚Ä¢ {s}", normal_style))
    content.append(Spacer(1, 20))
    
    # Panel Notes - Hi·ªÉn th·ªã ngay t·ª´ panel note ƒë·∫ßu ti√™n
    if panel_notes and len(panel_notes) > 0:
        # B·∫Øt ƒë·∫ßu v·ªõi Panel Note ƒë·∫ßu ti√™n thay v√¨ CHI TI·∫æT KH·∫¢O S√ÅT
        for note_idx, note in enumerate(panel_notes):
            if note_idx == 0:
                content.append(Paragraph(f"KHU V·ª∞C KH·∫¢O S√ÅT #{note_idx+1}", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
            else:
                content.append(Paragraph(f"KHU V·ª∞C KH·∫¢O S√ÅT #{note_idx+1}", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
            
            content.append(Spacer(1, 10))
            
            note_data = [
                ["Khu v·ª±c:", note['area']],
                ["Thi·∫øt b·ªã:", note['device']],
                ["M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:", note['findings']],
            ]
            
            t = Table(note_data, colWidths=[150, 270])
            t.setStyle(TableStyle([
                ('FONT', (0, 0), (-1, -1), font_name, 10),
                ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ]))
            content.append(t)
            content.append(Spacer(1, 10))
            
            # H√¨nh ·∫£nh c·ªßa panel note
            if note.get('images') and len(note['images']) > 0:
                content.append(Paragraph(f"·∫¢NH KH·∫¢O S√ÅT KHU V·ª∞C #{note_idx+1}", ParagraphStyle('Heading3', parent=styles['Heading3'], fontName=font_name, alignment=1)))
                content.append(Spacer(1, 10))
                
                for img_idx, img_url in enumerate(note['images']):
                    img = load_image_from_url(img_url)
                    if img:
                        # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                        if img.mode == 'RGBA':
                            background = Image.new('RGB', img.size, (255, 255, 255))
                            background.paste(img, mask=img.split()[3])
                            img = background
                        
                        # Chuy·ªÉn ƒë·ªïi PIL Image sang bytesIO ƒë·ªÉ ReportLab c√≥ th·ªÉ s·ª≠ d·ª•ng
                        img_byte_arr = io.BytesIO()
                        img.save(img_byte_arr, format='JPEG')
                        img_byte_arr.seek(0)
                        
                        # Th√™m caption cho h√¨nh ·∫£nh
                        content.append(Paragraph(f"H√¨nh {note_idx+1}.{img_idx+1}:", normal_style))
                        
                        # T√≠nh to√°n k√≠ch th∆∞·ªõc ·∫£nh ph√π h·ª£p
                        img_width, img_height = img.size
                        ratio = min(400/img_width, 300/img_height) if img_width > 0 and img_height > 0 else 1
                        new_width = img_width * ratio
                        new_height = img_height * ratio
                        
                        # Th√™m h√¨nh ·∫£nh v√†o t√†i li·ªáu PDF
                        img_reportlab = RLImage(img_byte_arr, width=new_width, height=new_height)
                        content.append(img_reportlab)
                        content.append(Spacer(1, 10))
            
            content.append(Spacer(1, 10))
    else:
        # N·∫øu kh√¥ng c√≥ panel notes, hi·ªÉn th·ªã th√¥ng tin t·ª´ detail_data
        content.append(Paragraph("KHU V·ª∞C KH·∫¢O S√ÅT #1", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
        content.append(Spacer(1, 10))
        
        detail_data = [
            ["Khu v·ª±c:", survey_data['detail'][0]],
            ["Thi·∫øt b·ªã:", survey_data['detail'][1]],
            ["M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:", survey_data['detail'][2]],
        ]
        
        t = Table(detail_data, colWidths=[150, 270])
        t.setStyle(TableStyle([
            ('FONT', (0, 0), (-1, -1), font_name, 10),
            ('ALIGN', (0, 0), (0, -1), 'RIGHT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ]))
        content.append(t)
        content.append(Spacer(1, 20))
        
        # H√¨nh ·∫£nh
        if images:
            content.append(Paragraph("·∫¢NH KH·∫¢O S√ÅT KHU V·ª∞C #1", ParagraphStyle('Heading2', parent=styles['Heading2'], fontName=font_name, alignment=1)))
            content.append(Spacer(1, 10))
            
            for i, img in enumerate(images):
                if img:
                    # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                    if img.mode == 'RGBA':
                        background = Image.new('RGB', img.size, (255, 255, 255))
                        background.paste(img, mask=img.split()[3])
                        img = background
                    
                    # Chuy·ªÉn ƒë·ªïi PIL Image sang bytesIO ƒë·ªÉ ReportLab c√≥ th·ªÉ s·ª≠ d·ª•ng
                    img_byte_arr = io.BytesIO()
                    img.save(img_byte_arr, format='JPEG')
                    img_byte_arr.seek(0)
                    
                    # Th√™m caption cho h√¨nh ·∫£nh
                    content.append(Paragraph(f"H√¨nh 1.{i+1}:", normal_style))
                    
                    # T√≠nh to√°n k√≠ch th∆∞·ªõc ·∫£nh ph√π h·ª£p (t·ªëi ƒëa 400x300, gi·ªØ t·ª∑ l·ªá)
                    img_width, img_height = img.size
                    ratio = min(400/img_width, 300/img_height) if img_width > 0 and img_height > 0 else 1
                    new_width = img_width * ratio
                    new_height = img_height * ratio
                    
                    # Th√™m h√¨nh ·∫£nh v√†o t√†i li·ªáu PDF
                    img_reportlab = RLImage(img_byte_arr, width=new_width, height=new_height)
                    content.append(img_reportlab)
                    content.append(Spacer(1, 10))
    
    # Th√™m ng√†y xu·∫•t b√°o c√°o
    current_date = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    content.append(Spacer(1, 20))
    content.append(Paragraph(f"B√°o c√°o ƒë∆∞·ª£c xu·∫•t ng√†y: {current_date}", normal_style))
    content.append(Paragraph(f"Ng∆∞·ªùi xu·∫•t b√°o c√°o: {st.session_state.user.get('full_name', '')}", normal_style))
    
    doc.build(content)
    pdf = buffer.getvalue()
    buffer.close()
    return pdf

def export_to_word(survey_data, images, panel_notes=None):
    """T·∫°o file Word t·ª´ d·ªØ li·ªáu kh·∫£o s√°t."""
    # Import c√°c module c·∫ßn thi·∫øt
    from docx import Document
    from docx.shared import Inches, Pt, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    
    doc = Document()
    
    # Thi·∫øt l·∫≠p font v√† c·ª° ch·ªØ m·∫∑c ƒë·ªãnh
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(12)
    
    # Ti√™u ƒë·ªÅ
    heading = doc.add_heading('B√ÅO C√ÅO KH·∫¢O S√ÅT ISO 50001', level=1)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Th√¥ng tin c√¥ng ty v√† kh·∫£o s√°t
    table = doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
    
    rows = table.rows
    cells = rows[0].cells
    cells[0].text = 'T√™n c√¥ng ty:'
    cells[1].text = survey_data['header']['company_name']
    
    cells = rows[1].cells
    cells[0].text = 'ƒê·ªãa ch·ªâ:'
    cells[1].text = survey_data['header']['address']
    
    cells = rows[2].cells
    cells[0].text = 'S·ªë ƒëi·ªán tho·∫°i:'
    cells[1].text = survey_data['header']['phone']
    
    cells = rows[3].cells
    cells[0].text = 'Ng√†y kh·∫£o s√°t:'
    cells[1].text = survey_data['header']['survey_date']
    
    doc.add_paragraph('')
    
    # Ng∆∞·ªùi tham gia
    doc.add_heading('Th√†nh vi√™n tham gia:', level=2)
    participants = survey_data['header']['participants'].split('\n')
    for p in participants:
        if p.strip():
            doc.add_paragraph(f"‚Ä¢ {p}", style='List Bullet')
    
    # Ng∆∞·ªùi kh·∫£o s√°t
    doc.add_heading('Ng∆∞·ªùi kh·∫£o s√°t:', level=2)
    surveyors = survey_data['header']['surveyors'].split('\n')
    for s in surveyors:
        if s.strip():
            doc.add_paragraph(f"‚Ä¢ {s}", style='List Bullet')
    
    doc.add_paragraph('')
    
    # Panel Notes - Hi·ªÉn th·ªã ngay t·ª´ panel note ƒë·∫ßu ti√™n
    if panel_notes and len(panel_notes) > 0:
        # B·∫Øt ƒë·∫ßu v·ªõi Panel Note ƒë·∫ßu ti√™n thay v√¨ CHI TI·∫æT KH·∫¢O S√ÅT
        for note_idx, note in enumerate(panel_notes):
            heading = doc.add_heading(f'KHU V·ª∞C KH·∫¢O S√ÅT #{note_idx+1}', level=2)
            heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            table = doc.add_table(rows=3, cols=2)
            table.style = 'Table Grid'
            
            rows = table.rows
            cells = rows[0].cells
            cells[0].text = 'Khu v·ª±c:'
            cells[1].text = note['area']
            
            cells = rows[1].cells
            cells[0].text = 'Thi·∫øt b·ªã:'
            cells[1].text = note['device']
            
            cells = rows[2].cells
            cells[0].text = 'M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:'
            cells[1].text = note['findings']
            
            doc.add_paragraph('')
            
            # H√¨nh ·∫£nh c·ªßa panel note
            if note.get('images') and len(note['images']) > 0:
                heading = doc.add_heading(f'·∫¢NH KH·∫¢O S√ÅT KHU V·ª∞C #{note_idx+1}', level=3)
                heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
                
                for img_idx, img_url in enumerate(note['images']):
                    img = load_image_from_url(img_url)
                    if img:
                        # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                        if img.mode == 'RGBA':
                            background = Image.new('RGB', img.size, (255, 255, 255))
                            background.paste(img, mask=img.split()[3])
                            img = background
                        
                        # L∆∞u ·∫£nh t·∫°m th·ªùi ƒë·ªÉ ch√®n v√†o Word
                        img_byte_arr = io.BytesIO()
                        img.save(img_byte_arr, format='JPEG')
                        img_byte_arr.seek(0)
                        
                        # Th√™m caption v√† h√¨nh ·∫£nh
                        doc.add_paragraph(f"H√¨nh {note_idx+1}.{img_idx+1}:")
                        doc.add_picture(img_byte_arr, width=Inches(6))
                        doc.add_paragraph('')
            
            doc.add_paragraph('')
    else:
        # N·∫øu kh√¥ng c√≥ panel notes, hi·ªÉn th·ªã th√¥ng tin t·ª´ detail_data
        heading = doc.add_heading('KHU V·ª∞C KH·∫¢O S√ÅT #1', level=2)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        table = doc.add_table(rows=3, cols=2)
        table.style = 'Table Grid'
        
        rows = table.rows
        cells = rows[0].cells
        cells[0].text = 'Khu v·ª±c:'
        cells[1].text = survey_data['detail'][0]
        
        cells = rows[1].cells
        cells[0].text = 'Thi·∫øt b·ªã:'
        cells[1].text = survey_data['detail'][1]
        
        cells = rows[2].cells
        cells[0].text = 'M√¥ t·∫£ t·ªïn th·∫•t/th√¥ng s·ªë k·ªπ thu·∫≠t:'
        cells[1].text = survey_data['detail'][2]
        
        doc.add_paragraph('')
        
        # H√¨nh ·∫£nh
        if images:
            heading = doc.add_heading('·∫¢NH KH·∫¢O S√ÅT KHU V·ª∞C #1', level=2)
            heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
            
            for i, img in enumerate(images):
                if img:
                    # Chuy·ªÉn ƒë·ªïi sang RGB n·∫øu l√† RGBA
                    if img.mode == 'RGBA':
                        background = Image.new('RGB', img.size, (255, 255, 255))
                        background.paste(img, mask=img.split()[3])
                        img = background
                    
                    # L∆∞u ·∫£nh t·∫°m th·ªùi ƒë·ªÉ ch√®n v√†o Word
                    img_byte_arr = io.BytesIO()
                    img.save(img_byte_arr, format='JPEG')
                    img_byte_arr.seek(0)
                    
                    # Th√™m caption v√† h√¨nh ·∫£nh
                    doc.add_paragraph(f"H√¨nh 1.{i+1}:")
                    doc.add_picture(img_byte_arr, width=Inches(6))
                    doc.add_paragraph('')
    
    # Th√™m ng√†y xu·∫•t b√°o c√°o
    current_date = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    doc.add_paragraph('')
    doc.add_paragraph(f"B√°o c√°o ƒë∆∞·ª£c xu·∫•t ng√†y: {current_date}")
    doc.add_paragraph(f"Ng∆∞·ªùi xu·∫•t b√°o c√°o: {st.session_state.user.get('full_name', '')}")
    
    # L∆∞u v√†o memory buffer
    buffer = io.BytesIO()
    doc.save(buffer)
    docx = buffer.getvalue()
    buffer.close()
    return docx

# --- CSS cho giao di·ªán ---
st.markdown("""
<style>
.download-button {
    display: inline-block;
    padding: 0.5em 1em;
    text-decoration: none;
    color: white;
    background-color: #0066cc;
    border-radius: 5px;
    font-weight: bold;
    margin: 0.5em 0;
    text-align: center;
}
.download-button:hover {
    background-color: #0052a3;
}
.image-controls {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 10px 0;
}
.stButton button {
    min-height: 2.5em;
}
.image-preview {
    margin: 10px 0;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
}
.panel-note {
    margin: 15px 0;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
}
.user-info {
    text-align: right;
    font-size: 0.9em;
    margin-bottom: 10px;
}
</style>
""", unsafe_allow_html=True)

# --- Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ---
user_role = "Qu·∫£n tr·ªã vi√™n" if st.session_state.user["role"] == "admin" else "Th√†nh vi√™n"
st.markdown(f"""
<div class="user-info">
    Xin ch√†o, <b>{st.session_state.user['full_name']}</b> | Vai tr√≤: <b>{user_role}</b> | 
    <a href="javascript:void(0);" id="logout-link">ƒêƒÉng xu·∫•t</a>
</div>
<script>
    document.getElementById('logout-link').addEventListener('click', function() {{
        window.parent.postMessage({{type: 'streamlit:setComponentValue', value: true, dataType: 'logout'}}, '*');
    }});
</script>
""", unsafe_allow_html=True)

# X·ª≠ l√Ω ƒëƒÉng xu·∫•t
if st.session_state.get('logout', False):
    st.session_state.user = None
    st.session_state.logout = False
    try:
        st.switch_page("login.py")
    except Exception:
        try:
            st.switch_page("../login.py")
        except Exception:
            st.error("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p. Vui l√≤ng quay l·∫°i trang ch·ªß.")
    st.stop()

# --- K·∫øt n·ªëi v·ªõi Supabase ---
supabase = init_supabase()

# --- Giao di·ªán ch√≠nh ---
st.title("üìù Form Kh·∫£o s√°t hi·ªán tr∆∞·ªùng ISO 50001:2018")

# Tab cho c√°c ch·ª©c nƒÉng kh√°c nhau
tab_input, tab_export = st.tabs(["Nh·∫≠p li·ªáu", "Xu·∫•t b√°o c√°o"])

with tab_input:
    if not supabase:
        st.error("üò¢ Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu Supabase.")
        st.warning("Vui l√≤ng c·∫•u h√¨nh k·∫øt n·ªëi Supabase trong Streamlit Secrets.")
        st.info("""
        ### H∆∞·ªõng d·∫´n c·∫•u h√¨nh Supabase
        
        1. ƒêƒÉng nh·∫≠p v√†o [Streamlit Cloud](https://share.streamlit.io)
        2. Ch·ªçn Settings > Secrets c·ªßa ·ª©ng d·ª•ng
        3. Th√™m th√¥ng tin sau (v·ªõi gi√° tr·ªã th·ª±c t·∫ø c·ªßa b·∫°n):
        ```
        [supabase]
        url = "https://your-project-id.supabase.co"
        key = "your-supabase-service-role-key"
        ```
        4. L∆∞u v√† kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
        """)
        
        # Hi·ªÉn th·ªã giao di·ªán gi·∫£ ƒë·ªÉ ng∆∞·ªùi d√πng v·∫´n c√≥ th·ªÉ xem giao di·ªán
        st.subheader("Xem tr∆∞·ªõc giao di·ªán (ch·∫ø ƒë·ªô demo)")
        st.write("L∆∞u √Ω: Ch·ª©c nƒÉng l∆∞u d·ªØ li·ªáu s·∫Ω kh√¥ng ho·∫°t ƒë·ªông cho ƒë·∫øn khi c·∫•u h√¨nh Supabase")
        
        with st.form("demo_form"):
            st.header("Th√¥ng tin kh·∫£o s√°t")
            st.text_input("T√™n c√¥ng ty")
            st.text_input("ƒê·ªãa ch·ªâ")
            st.text_input("S·ªë ƒëi·ªán tho·∫°i")
            st.date_input("Ng√†y kh·∫£o s√°t")
            st.form_submit_button("G·ª≠i d·ªØ li·ªáu (Ch·ª©c nƒÉng demo)")
        
        st.stop()  # D·ª´ng ·ªü ƒë√¢y, kh√¥ng ch·∫°y ph·∫ßn code th·ª±c t·∫ø
    
    # Form nh·∫≠p d·ªØ li·ªáu - KH√îNG CH·ª®a n√∫t L∆∞u d·ªØ li·ªáu n·ªØa
    with st.form("survey_form", clear_on_submit=False):
        st.header("Th√¥ng tin kh·∫£o s√°t ISO 50001")
        
        # N·∫øu ƒëang ch·ªânh s·ª≠a, hi·ªÉn th·ªã ID
        if st.session_state.editing_survey_id:
            st.info(f"ƒêang ch·ªânh s·ª≠a kh·∫£o s√°t ID: {st.session_state.editing_survey_id}")
            
            # Load d·ªØ li·ªáu hi·ªán c√≥ n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
            try:
                response = supabase.table('surveys').select('*').eq('id', st.session_state.editing_survey_id).execute()
                if response.data and len(response.data) > 0:
                    survey_data = response.data[0]
                    
                    # Ki·ªÉm tra quy·ªÅn n·∫øu kh√¥ng ph·∫£i admin
                    if st.session_state.user["role"] != "admin" and survey_data["created_by"] != st.session_state.user["id"]:
                        st.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kh·∫£o s√°t n√†y!")
                        st.button("Quay l·∫°i")
                        st.stop()
                    
                    # Load panel notes
                    panel_notes_response = supabase.table('panel_notes').select('*').eq('survey_id', st.session_state.editing_survey_id).execute()
                    if panel_notes_response.data:
                        st.session_state.panel_notes = panel_notes_response.data
                        
                        # Kh·ªüi t·∫°o panel_images
                        for note in st.session_state.panel_notes:
                            note_id = note["id"]
                            st.session_state.panel_images[note_id] = {}
            except Exception as e:
                st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        
        company_name = st.text_input("T√™n c√¥ng ty")
        address = st.text_input("ƒê·ªãa ch·ªâ")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
        survey_date = st.date_input("Ng√†y kh·∫£o s√°t")

        # Th√†nh vi√™n tham gia
        st.subheader("Th√†nh vi√™n tham gia")
        participant_values = []
        for i in range(len(st.session_state.participant_inputs)):
            participant_values.append(st.text_input(f"Th√†nh vi√™n {i+1}", key=f"participant_{i}"))
        
        if st.form_submit_button("‚ûï Th√™m th√†nh vi√™n", type="secondary"):
            add_participant_input()
            st.rerun()

        # Ng∆∞·ªùi kh·∫£o s√°t
        st.subheader("Ng∆∞·ªùi kh·∫£o s√°t")
        surveyor_values = []
        for i in range(len(st.session_state.surveyor_inputs)):
            surveyor_values.append(st.text_input(f"Ng∆∞·ªùi kh·∫£o s√°t {i+1}", key=f"surveyor_{i}"))
        
        if st.form_submit_button("‚ûï Th√™m ng∆∞·ªùi kh·∫£o s√°t", type="secondary"):
            add_surveyor_input()
            st.rerun()

        # Th√¥ng tin thi·∫øt b·ªã
        st.subheader("Th√¥ng tin thi·∫øt b·ªã")
        area = st.text_input("Khu v·ª±c")
        device = st.text_input("Thi·∫øt b·ªã")
        findings = st.text_area("M√¥ t·∫£ t·ªïn th·∫•t ho·∫∑c th√¥ng s·ªë k·ªπ thu·∫≠t")
        
        # B·ªè n√∫t submit form ·ªü ƒë√¢y
    
    # Ph·∫ßn upload ·∫£nh (ƒë·∫∑t ngo√†i form ƒë·ªÉ tr√°nh l·ªói)
    st.subheader("T·∫£i l√™n h√¨nh ·∫£nh ch√≠nh")
    
    for i in range(st.session_state.image_uploader_count):
        cols = st.columns([4, 1])
        with cols[0]:
            uploaded_file = st.file_uploader(
                f"·∫¢nh {i+1}", 
                type=["png", "jpg", "jpeg", "heic", "heif", "bmp"], 
                key=f"image_{i}"
            )
            if uploaded_file:
                st.session_state.uploaded_images[f"image_{i}"] = uploaded_file
                try:
                    image = Image.open(uploaded_file)
                    st.image(image, caption=f"·∫¢nh {i+1}: {uploaded_file.name}", width=300)
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {e}")
        
        with cols[1]:
            if st.button(f"X√≥a ·∫£nh #{i+1}", key=f"remove_img_{i}"):
                remove_image_uploader(i)
                st.rerun()
    
    # N√∫t th√™m ·∫£nh (ƒë·∫∑t ngo√†i form)
    if st.button("‚ûï Th√™m ·∫£nh ch√≠nh kh√°c"):
        add_image_uploader()
        st.rerun()
    
    # Panel Notes
    st.header("Kh·∫£o s√°t Khu v·ª±c/Qu√° tr√¨nh/Thi·∫øt b·ªã")
    st.write("Th√™m c√°c ghi ch√∫ chi ti·∫øt cho t·ª´ng khu v·ª±c, Qu√° tr√¨nh ho·∫∑c thi·∫øt b·ªã")
    
    # Hi·ªÉn th·ªã c√°c panel notes hi·ªán c√≥
    for idx, note in enumerate(st.session_state.panel_notes):
        with st.expander(f"Khu v·ª±c kh·∫£o s√°t #{idx+1}", expanded=True):
            st.markdown(f"<div class='panel-note'>", unsafe_allow_html=True)
            
            # Form nh·∫≠p th√¥ng tin panel note
            note_cols = st.columns(3)
            with note_cols[0]:
                note["area"] = st.text_input(f"Khu v·ª±c", value=note.get("area", ""), key=f"note_{idx}_area")
            with note_cols[1]:
                note["device"] = st.text_input(f"Thi·∫øt b·ªã", value=note.get("device", ""), key=f"note_{idx}_device")
            with note_cols[2]:
                if st.button(f"X√≥a Khu v·ª±c kh·∫£o s√°t", key=f"remove_note_{idx}"):
                    remove_panel_note(idx)
                    st.rerun()
            
            note["findings"] = st.text_area(f"M√¥ t·∫£ t·ªïn th·∫•t ho·∫∑c th√¥ng s·ªë k·ªπ thu·∫≠t", value=note.get("findings", ""), key=f"note_{idx}_findings")
            
            # Upload h√¨nh ·∫£nh cho panel note
            st.subheader(f"H√¨nh ·∫£nh Khu v·ª±c kh·∫£o s√°t #{idx+1}")
            
            note_id = note["id"]
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ c√≥ t·ª´ CSDL n·∫øu ƒëang ch·ªânh s·ª≠a
            existing_images = note.get("images", [])
            if existing_images:
                image_cols = st.columns(min(3, len(existing_images)))
                for img_idx, img_url in enumerate(existing_images):
                    with image_cols[img_idx % 3]:
                        st.image(img_url, caption=f"·∫¢nh {img_idx+1}", width=200)
                        if st.button(f"X√≥a ·∫£nh n√†y", key=f"remove_note_img_{idx}_{img_idx}"):
                            existing_images.pop(img_idx)
                            st.rerun()
            
            # Th√™m ·∫£nh m·ªõi - ch·ªâ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng tr∆∞·ªùng uploader ƒë√£ ƒë·ªãnh nghƒ©a
            panel_images = st.session_state.panel_images.get(note_id, {})
            
            for img_idx in range(len(panel_images)):
                img_key = f"image_{img_idx}"
                if img_key in panel_images:
                    img_cols = st.columns([4, 1])
                    with img_cols[0]:
                        uploaded_file = st.file_uploader(
                            f"Th√™m ·∫£nh {img_idx+1}", 
                            type=["png", "jpg", "jpeg", "heic", "heif", "bmp"], 
                            key=f"note_{idx}_img_{img_idx}"
                        )
                        if uploaded_file:
                            panel_images[img_key] = uploaded_file
                            try:
                                image = Image.open(uploaded_file)
                                st.image(image, caption=f"·∫¢nh {img_idx+1}: {uploaded_file.name}", width=300)
                            except Exception as e:
                                st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã ·∫£nh: {e}")
                    
                    with img_cols[1]:
                        if st.button(f"X√≥a", key=f"remove_note_img_new_{idx}_{img_idx}"):
                            remove_panel_image(note_id, img_key)
                            st.rerun()
            
            if st.button(f"‚ûï Th√™m ·∫£nh kh√°c", key=f"add_note_img_{idx}"):
                add_panel_image(note_id)
                st.rerun()
            
            st.markdown(f"</div>", unsafe_allow_html=True)
    
    # Di chuy·ªÉn n√∫t Th√™m Panel Note v√† L∆∞u d·ªØ li·ªáu xu·ªëng cu·ªëi trang
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ûï Th√™m Khu v·ª±c kh·∫£o s√°t"):
            add_panel_note()
            st.rerun()
    
    with col2:
        # N√∫t L∆∞u d·ªØ li·ªáu ƒë∆∞·ª£c ƒë∆∞a ra kh·ªèi form v√† ƒë·∫∑t ·ªü cu·ªëi
        submitted = st.button("L∆∞u d·ªØ li·ªáu", type="primary")
    
    # X·ª≠ l√Ω n√∫t submit
    if submitted:
        with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
            # L·∫•y d·ªØ li·ªáu t·ª´ form
            participants = "\n".join([v for v in participant_values if v])
            surveyors = "\n".join([v for v in surveyor_values if v])
            
            header_data = {
                "company_name": company_name,
                "address": address,
                "phone": phone,
                "survey_date": str(survey_date),
                "participants": participants,
                "surveyors": surveyors
            }

            detail_data = [area, device, findings]
            
            # Upload ·∫£nh l√™n Supabase
            image_urls = []
            
            for i in range(st.session_state.image_uploader_count):
                file_key = f"image_{i}"
                if file_key in st.session_state.uploaded_images:
                    file = st.session_state.uploaded_images[file_key]
                    if file:
                        with st.spinner(f"ƒêang t·∫£i l√™n ·∫£nh {i+1}..."):
                            image_url = upload_image_to_supabase(supabase, file)
                            if image_url:
                                image_urls.append(image_url)
                                st.success(f"‚úÖ ·∫¢nh {i+1} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n")
                            else:
                                st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh {i+1}")
            
            # X·ª≠ l√Ω ·∫£nh cho panel notes
            panel_notes_data = []
            for idx, note in enumerate(st.session_state.panel_notes):
                note_id = note["id"]
                note_data = {
                    "id": note_id,
                    "area": note["area"],
                    "device": note["device"],
                    "findings": note["findings"],
                    "images": note.get("images", [])  # Gi·ªØ l·∫°i ·∫£nh c≈© n·∫øu c√≥
                }
                
                # Upload ·∫£nh m·ªõi cho panel note
                if note_id in st.session_state.panel_images:
                    for img_key, file in st.session_state.panel_images[note_id].items():
                        if file:
                            with st.spinner(f"ƒêang t·∫£i l√™n ·∫£nh cho Khu v·ª±c kh·∫£o s√°t #{idx+1}..."):
                                image_url = upload_image_to_supabase(supabase, file)
                                if image_url:
                                    note_data["images"].append(image_url)
                                    st.success(f"‚úÖ ·∫¢nh cho Khu v·ª±c kh·∫£o s√°t #{idx+1} ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n")
                                else:
                                    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i l√™n ·∫£nh cho Khu v·ª±c kh·∫£o s√°t #{idx+1}")
                
                panel_notes_data.append(note_data)

            # L∆∞u d·ªØ li·ªáu v√†o Supabase
            with st.spinner("ƒêang l∆∞u d·ªØ li·ªáu kh·∫£o s√°t..."):
                survey_id = save_survey_data_to_supabase(
                    supabase, 
                    header_data, 
                    detail_data, 
                    image_urls,
                    panel_notes_data,
                    st.session_state.editing_survey_id
                )
                
                if survey_id:
                    action = "c·∫≠p nh·∫≠t" if st.session_state.editing_survey_id else "l∆∞u"
                    st.success(f"üéâ D·ªØ li·ªáu kh·∫£o s√°t ƒë√£ ƒë∆∞·ª£c {action} th√†nh c√¥ng! (ID: {survey_id})")
                    
                    # L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng ·ªü tab xu·∫•t b√°o c√°o
                    st.session_state.survey_data = {
                        "header": header_data,
                        "detail": detail_data,
                        "image_urls": image_urls,
                        "panel_notes": panel_notes_data
                    }
                    
                    # Reset tr·∫°ng th√°i ch·ªânh s·ª≠a
                    st.session_state.editing_survey_id = None
                    
                    st.info("B·∫°n c√≥ th·ªÉ chuy·ªÉn sang tab 'Xu·∫•t b√°o c√°o' ƒë·ªÉ t·∫£i b√°o c√°o d∆∞·ªõi d·∫°ng PDF ho·∫∑c Word.")
                else:
                    st.error("‚ùå L∆∞u d·ªØ li·ªáu th·∫•t b·∫°i.")

with tab_export:
    st.header("Xu·∫•t b√°o c√°o kh·∫£o s√°t ISO 50001")
    
    # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t kh√¥ng
    if st.session_state.survey_data:
        st.info("B·∫°n c√≥ th·ªÉ t·∫£i xu·ªëng b√°o c√°o kh·∫£o s√°t d∆∞·ªõi d·∫°ng PDF ho·∫∑c Word.")
        
        # X·ª≠ l√Ω h√¨nh ·∫£nh ƒë·ªÉ s·∫µn s√†ng xu·∫•t b√°o c√°o
        images = []
        
        if "image_urls" in st.session_state.survey_data:
            # T·∫£i ·∫£nh t·ª´ URL (Supabase)
            with st.spinner("ƒêang t·∫£i ·∫£nh ƒë·ªÉ chu·∫©n b·ªã xu·∫•t b√°o c√°o..."):
                for url in st.session_state.survey_data["image_urls"]:
                    img = load_image_from_url(url)
                    if img:
                        images.append(img)
        else:
            # S·ª≠ d·ª•ng ·∫£nh upload local (c√°ch c≈©)
            for i in range(st.session_state.image_uploader_count):
                if f"image_{i}" in st.session_state.uploaded_images:
                    file = st.session_state.uploaded_images[f"image_{i}"]
                    if file:
                        # L∆∞u l·∫°i v·ªã tr√≠ con tr·ªè ƒë·ªçc file
                        current_pos = file.tell()
                        # ƒê·∫∑t l·∫°i v·ªã tr√≠ con tr·ªè file v·ªÅ ƒë·∫ßu ƒë·ªÉ ƒë·ªçc
                        file.seek(0)
                        img = process_image_for_export(file)
                        # Kh√¥i ph·ª•c v·ªã tr√≠ con tr·ªè ban ƒë·∫ßu
                        file.seek(current_pos)
                        images.append(img)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("T·∫£i xu·ªëng B√°o c√°o kh·∫£o s√°t pdf")
            if st.button("T·∫°o file PDF"):
                with st.spinner("ƒêang t·∫°o file PDF..."):
                    pdf_data = export_to_pdf(
                        st.session_state.survey_data, 
                        images, 
                        st.session_state.survey_data.get("panel_notes", [])
                    )
                    company_name_safe = st.session_state.survey_data['header']['company_name'].replace(' ', '_')
                    date_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"bao_cao_khao_sat_{company_name_safe}_{date_str}.pdf"
                    
                    st.markdown(
                        get_download_link(pdf_data, filename, "üì• T·∫£i xu·ªëng B√°o c√°o file PDF"),
                        unsafe_allow_html=True
                    )
        
        with col2:
            st.subheader("T·∫£i xu·ªëng B√°o c√°o kh·∫£o s√°t file Word")
            if st.button("T·∫°o file B√°o c√°o kh·∫£o s√°t Word"):
                with st.spinner("ƒêang t·∫°o file B√°o c√°o Word..."):
                    docx_data = export_to_word(
                        st.session_state.survey_data, 
                        images,
                        st.session_state.survey_data.get("panel_notes", [])
                    )
                    company_name_safe = st.session_state.survey_data['header']['company_name'].replace(' ', '_')
                    date_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"bao_cao_khao_sat_{company_name_safe}_{date_str}.docx"
                    
                    st.markdown(
                        get_download_link(docx_data, filename, "üì• T·∫£i xu·ªëng file Word"),
                        unsafe_allow_html=True
                    )
    else:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t b√°o c√°o. Vui l√≤ng nh·∫≠p v√† g·ª≠i d·ªØ li·ªáu kh·∫£o s√°t tr∆∞·ªõc.")